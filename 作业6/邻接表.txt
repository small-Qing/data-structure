邻接表是图的一种链式存储结构，既适合于存储无向图，也适合于存储有向图。在邻接表中，用一个一维数组存储图中的每个顶点的信息，同时为每个顶点建立一个单链表，链表中的节点保存依附在该顶点上的边或弧的信息。

//图的邻接表存储表示  
#define MAX_NUM 20  
enum GraphKind{GY,GN}; // {有向图,无向图}  
typedef struct   
{  
   int adjvex; // 该弧所指向的顶点或边的另一个顶点的位置  
   ArcNode *nextarc; // 指向下一条弧或边的指针  
   InfoType *info; // 与弧或边相关信息的指针（可无）  
}ArcNode;// 表结点  
typedef struct  
{  
   VertexType data; // 顶点信息  
   ArcNode *firstarc; // 第一个表结点的地址,指向第一条依附该顶点的弧或边的指针  
}VNode,AdjList[MAX_NUM]; // 头结点  
struct   
{  
   AdjList vertices;  
   int vexnum,arcnum; // 图的当前顶点数和弧（边）数  
   GraphKind kind; // 图的种类标志  
}Graph; 

在邻接表上容易找到任意一个顶点的第一个邻接点和下一个邻接点，但是要判定任意两个顶点之间是否有边或弧需搜索两个顶点对应的链表，不及邻接矩阵方便。
    很明显，邻接表所占用的存储空间与图的边数或弧数有关，因此适用于边数或弧数较少的稀疏图。